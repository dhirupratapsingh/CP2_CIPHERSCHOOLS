/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode *merge(ListNode* h1, ListNode* h2){
        ListNode *head = NULL, *t;
        if(h1->next)h1 = sortList(h1);
        if(h2->next)h2 = sortList(h2);
        while(h1 and h2){
            if(h1->val <= h2->val){
                if(!head){
                    head = h1;
                    h1 = h1->next;
                    t = head;
                }
                else{
                    t->next = h1;
                    h1 = h1->next;
                    t = t->next;
                }
            }
            else{
                if(!head){
                    head = h2;
                    h2 = h2->next;
                    t = head;
                }else{
                    t->next = h2;
                    h2 = h2->next;
                    t = t->next;
                }
            }
        }
        while(h1 and t){
            t->next = h1;
            t = t->next;
            h1 = h1->next;
        }
        while(h2 and t){
            t->next = h2;
            t = t->next;
            h2 = h2->next;
        }
        return head;
    }
    ListNode* sortList(ListNode* head) {
        if(!head)return head;
        if(!head->next)return head;
        ListNode *s = head, *f = head->next, *h1 = head, *h2;
        while(f and f->next){
            s = s->next;
            f = f->next->next;
        }
             h2 = s->next;
            s->next = NULL;
        return merge(h1, h2);
    }
};
