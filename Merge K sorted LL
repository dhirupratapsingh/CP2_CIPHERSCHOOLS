/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
typedef pair<int, int> p;

class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size()<1)
            return nullptr;
        
        priority_queue<p, vector<p>, greater<p>> pq;
        
        for(int i=0;i<lists.size();i++) {
            if(lists[i]) {
                pq.push(make_pair(lists[i]->val,i));
            }
        }
        
        ListNode* head = nullptr;
        ListNode* iter = nullptr;
        int idx = 0;
        if(pq.size()>0) {
            auto top = pq.top();
            head = new ListNode(top.first);
            iter = head;
            lists[top.second] = lists[top.second]->next;
            pq.pop();
            if(lists[top.second])
                pq.push(make_pair(lists[top.second]->val,top.second));
        }
        while(!pq.empty()) {
            auto top = pq.top();
            iter->next = new ListNode(top.first);
            iter = iter->next;
            lists[top.second] = lists[top.second]->next;
            pq.pop();
            if(lists[top.second])
                pq.push(make_pair(lists[top.second]->val,top.second));
        }
        if(iter)
            iter->next = nullptr;
        return head;
    }
};
