class Solution {
public:
    int dfs(vector<vector<int>>& matrix,int i,int j,int pre, vector<vector<int>>& dp){
        //vector<vector<int>> dp(matrix.size(), vector<int>(matrix[0].size()), 0);
        if(i<0 || j<0 || i>matrix.size()-1 || j>matrix[0].size()-1)
            return 0;
        else if(pre>=matrix[i][j])
            return 0;
        else if(dp[i][j] != 0)
            return dp[i][j];
        int path1 =  dfs(matrix,i-1,j,matrix[i][j], dp); 
        int path2 =  dfs(matrix,i+1,j,matrix[i][j], dp); 
        int path3 =  dfs(matrix,i,j-1,matrix[i][j], dp); 
        int path4 =  dfs(matrix,i,j+1,matrix[i][j], dp); 

        int max1 = max(path1,path2);
        int max2 = max(path3,path4);
        
        dp[i][j] = 1+ max(max1,max2);
        return dp[i][j]; 
    }
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        if(matrix.size() ==0)
            return 0;
        int maxm = 0;
        vector<vector<int>> dp(matrix.size(), vector<int>(matrix[0].size()));
        for(int i=0;i<matrix.size();i++)
        {
            for(int j=0;j<matrix[0].size();j++)
            {
                if(dp[i][j] == 0)
                    dfs(matrix,i,j,INT_MIN, dp);
                    maxm = max(dp[i][j] , maxm);
            }
        }
        
       return maxm;
    }
};
